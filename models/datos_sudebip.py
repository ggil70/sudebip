
# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
# Generated by the OpenERP plugin for Dia !
# from osv import fields,osv --- <8.0.X
from odoo import api, fields, models
from odoo.exceptions import ValidationError
from datetime import date, datetime,timedelta
from odoo import api
from time import time
formatter_string = "%d-%m-%y" 
#from tools.translate import_
#from odoo import tools
import sys
#reload(sys)
#sys.setdefaultencoding("utf-8")
#Importamos la libreria logger
import logging
#Definimos la Variable Global
codigo_ad = ''
_logger = logging.getLogger(__name__)


########### Clasificacin de lo Bienes (SUDEBIP)###############################
class catalogo_sudebi(models.Model):
    """Registra la Clasificacion de Bienes listo(SUDEBIP)"""
    _name = 'catalogo_sudebi'
    #_rec_name = 'catalogo_sudebi_codigo'
    _rec_name = 'catalogo_sudebi_nombre'
    catalogo_sudebi_codigo   = fields.Char(string='Codigo de la Categoria',size=10,required=True, help='Codigo de la Categoria General de la (SUDEBIP)')
    catalogo_sudebi_nombre   = fields.Char(string='Nombre de la Categoria',size=100,required=True, help='Nombre de la Categoria General de la (SUDEBIP)')
   
    _sql_constraints = [('catalogo_sudebi_codigo', 'unique(catalogo_sudebi_codigo)', 'El Código debe se único!')]
    _sql_constraints = [('catalogo_sudebi_nombre', 'unique(catalogo_sudebi_nombre  )', 'El Nombre debe se único!')]


class catalogo_sudebi_sub(models.Model):
     """Registra la Sub-Clasificacion de Bienes listo(SUDEBIP)"""
     _name = 'catalogo_sudebi_sub'
     #_rec_name = 'catalogo_sudebi_sub_codigo'
     _rec_name = 'catalogo_sudebi_sub_nombre'
     #_rec_name = 'catalogo_sudebi_id'
    
     catalogo_sudebi_sub_codigo  = fields.Char(string='Codigo de la Categoria',size=10,required=True, help='Codigo de la Categoria Sub-General de la (SUDEBIP)')
     catalogo_sudebi_sub_nombre  = fields.Char(string='Nombre de la Categoria',size=100,required=True, help='Nombre de la Categoria Sub-General de la (SUDEBIP)')
     catalogo_sudebi_id          = fields.Many2one('catalogo_sudebi',string='Categoria General', help='Registra el Código de vinculacion con la Categoria General ')
    
     _sql_constraints = [('catalogo_sudebi_sub_codigo', 'unique(catalogo_sudebi_sub_codigo)', 'El Código debe se único!')]
     _sql_constraints = [('catalogo_sudebi_sub_nombre','unique(catalogo_sudebi_sub_nombre)', 'El Nombre debe se único!')]



class catalogo_sudebi_esp(models.Model):
     """Registra la Especifico de Bienes listo(SUDEBIP)"""
     _name = 'catalogo_sudebi_esp'
     #_rec_name = 'catalogo_sudebi_esp_codigo'
     _rec_name = 'catalogo_sudebi_esp_nombre'
     #_rec_name = 'catalogo_sudebi_sub_id'
   
     catalogo_sudebi_esp_codigo   = fields.Char(string='Codigo de la Categoria',size=10,required=True, help='Codigo de la Categoria Especifica de la (SUDEBIP)')
     catalogo_sudebi_esp_nombre   = fields.Char(string='Nombre de la Categoria',size=100,required=True, help='Nombre de la Categoria  Especifica de la (SUDEBIP)')
     catalogo_sudebi_sub_id       = fields.Many2one('catalogo_sudebi_sub',string='Sub-Categoria General', help='Registra el Código de vinculacion con la Categoria Sub-General ')
     
     _sql_constraints = [('catalogo_sudebi_esp_codigo', 'unique(catalogo_sudebi_esp_codigo)', 'El Código debe se único!')]

     _sql_constraints = [('catalogo_sudebi_esp_nombre','unique( catalogo_sudebi_sub_id,catalogo_sudebi_esp_nombre)', 'El Nombre debe se único!')]
 



class color_sudebi(models.Model):
    """Registra el Color de los Bienes segun listoSUDEBIP"""
    _name = 'color_sudebi'
    #_rec_name = 'color_sudebi_codigo'
    _rec_name = 'color_sudebi_nombre'
   
    color_sudebi_codigo = fields.Char(string='Codigo del Color segun Sudebip',size=3, help='Registra el Codigo de Color segun (SUDEBIP)')
    color_sudebi_nombre = fields.Char(string='Nombre del Color segun Sudebip',size=100,required=True, help='Registra el Nombre del Color')
   
    _sql_constraints = [('color_sudebi_codigo', 'unique(color_sudebi_codigo)', 'El Código debe se único!')]    
    _sql_constraints = [('color_sudebi_nombre', 'unique(color_sudebi_nombre)', 'El Color debe se único!')]     


class clase_sudebi(models.Model):
     """Registra las Clases de Vehiculos listo"""
     _name = 'clase_sudebi'
     # _rec_name = 'clase_sudebi_codigo'
     _rec_name = 'clase_sudebi_nombre'
                
    
     clase_sudebi_codigo   = fields.Char(string='Codigo de Clase de Vehículos',size=3,required=True, help='Registra el Codigo de Clase de Vehículos (SUDEBIP)')
     clase_sudebi_nombre   = fields.Char(string='Nombre de Clase de Vehículos',size=100,required=True, help='Registra el Nombre de la Clase de Vehículos(SUDEBIP)')
    


     @api.onchange('clase_sudebi_nombre')
     def onchange_nombre(self):
        self.clase_sudebi_nombre = self.clase_sudebi_nombre.upper()
  
_sql_constraints = [('clase_sudebi_codigo', 'unique(clase_sudebi_codigo)', 'El Código debe se único!')]
_sql_constraints = [('clase_sudebi_nombre', 'unique(clase_sudebi_nombre)', 'El Nombre debe se único!')]     



########################Fin de la Clasificacion del Bien SUDEBIP#######################################################



############################################Estatus del Bien SUDEBIP#############################################################
class estatus_uso(models.Model):
    """Registra el estatus de uso que tiene el Bien listo"""
    _name = 'estatus_uso'
    #_rec_name = 'estatus_uso_codigo'
    _rec_name = 'estatus_uso_nombre'
    
    estatus_uso_codigo = fields.Char(string='Codigo del Estatus de Uso',size=3,required=True, help='Registra el Codigo de uso del bien')
    estatus_uso_nombre = fields.Char(string='Nombre del Estatus de Uso',size=40,required=True, help='Registra la Descripcion del Estatus de uso del Bien')

    
    _sql_constraints = [('estatus_uso_codigo', 'unique(estatus_uso_codigo)', 'El Código debe se único!')]    
    _sql_constraints = [('estatus_uso_nombre', 'unique(estatus_uso_nombre)', 'El Nombre debe se único!')] 
    
    



class estado_bien(models.Model):
    """Registra el estatus del Bienlisto"""
    _name = 'estado_bien'
    #_rec_name = 'estado_bien_codigo'
    _rec_name = 'estado_bien_nombre'
    

    estado_bien_codigo = fields.Char(string='Codigo del Estado del Bien',size=3,required=True, help='Registra el Codigo del Estado del Bien')
    estado_bien_nombre = fields.Char(string='Nombre del Estado del bien',size=100,required=True, help='Registra la Descripcion del Estado del Bien')

    _sql_constraints = [('estado_bien_codigo', 'unique(estado_bien_codigo)', 'El Código debe se único!')]    
    _sql_constraints = [('estado_bien_nombre', 'unique(estado_bien_nombre)', 'El Nombre debe se único!')] 


class condicion_fisica(models.Model):

    """Registra la condicion fisica Bien listo"""
    _name = 'condicion_fisica'
   
    _rec_name = 'condicion_fisica_nombre'
    

    condicion_fisica_codigo = fields.Char(string='Codigo de la Condicion Fisica del Bien',size=3,required=True, help='Registra el Codigo de la Condicion Fisica del Bien')
    condicion_fisica_nombre = fields.Char(string='Nombre de la Condicion Fisica del bien',size=100,required=True, help='Registra la Descripcion de la Condicion Fisica del Bien')

    _sql_constraints = [('condicion_fisica_codigo', 'unique(condicion_fisica_codigo)', 'El Código debe se único!')]    
    _sql_constraints = [('condicion_fisica_nombre', 'unique(condicion_fisica_nombre)', 'El Nombre debe se único!')] 









class uso_inmueble(models.Model):
    """Registra el estatus de uso que tiene el Bien listo"""
    _name = 'uso_inmueble'
    #_rec_name = 'uso_inmueble_codigo'
    _rec_name = 'uso_inmueble_nombre'
    
    uso_inmueble_codigo = fields.Char(string='Codigo del Uso del Inmueble',size=3,required=True, help='Registra el Codigo de Uso del Inmueble')
    uso_inmueble_nombre = fields.Char(string='Nombre del Uso del Inmueble',size=40,required=True, help='Registra la Descripcion del Uso del Inmueble')

    
    _sql_constraints = [('uso_inmueble_codigo ', 'unique(uso_inmueble_codigo)', 'El Código debe se único!')]    
    _sql_constraints = [('uso_inmueble_nombre', 'unique(uso_inmueble_nombre)', 'El Nombre debe se único!')] 






class tipo_bien(models.Model):
    """Registra el tipo de  Bien listo"""
    _name = 'tipo_bien'
    #_rec_name = 'uso_inmueble_codigo'
    _rec_name = 'tipo_bien_nombre'
    
    tipo_bien_codigo = fields.Char(string='Codigo del Tipo de Bien',size=10,required=True, help='Registra el Codigo del Tipo de Bien')
    tipo_bien_nombre = fields.Char(string='Nombre del Tipo de Bien',size=40,required=True, help='Registra la Descripcion del Tipo de Bien')

    
    _sql_constraints = [('tipo_bien_codigo', 'unique(tipo_bien_codigo)', 'El Código debe se único!')]    
    _sql_constraints = [('tipo_bien_nombre', 'unique(tipo_bien_nombre)', 'El Nombre debe se único!')] 




class estado_ocupacion_inmueble(models.Model):
    """Registra el estado_ocupacion_inmueble"""
    _name = 'estado_ocupacion_inmueble'
    #_rec_name = 'uso_inmueble_codigo'
    _rec_name = 'estado_ocupacion_inmueble_nombre'
    
    estado_ocupacion_inmueble_codigo = fields.Char(string='Codigo del Estado de Ocupacion del Inmueble',size=1,required=True, help='Registra el Codigo del Estado de Ocupacion del Inmueble')
    estado_ocupacion_inmueble_nombre = fields.Char(string='Nombre del Estado de Ocupacion del Inmueble',size=40,required=True, help='Registra la Descripcion del Estado de Ocupacion del Inmueble')

    
    _sql_constraints = [('estado_ocupacion_inmueble_codigo', 'unique(estado_ocupacion_inmueble_codigo)', 'El Código debe se único!')]    
    _sql_constraints = [('estado_ocupacion_inmueble_nombre', 'unique(estado_ocupacion_inmueble_nombre)', 'El Nombre debe se único!')] 


class cargo_autoridad(models.Model):
    """Registra la auoridad  listo"""
    _name = 'cargo_autoridad'
    #_rec_name = 'uso_inmueble_codigo'
    _rec_name = 'cargo_autoridad_nombre'
    
    cargo_autoridad_codigo = fields.Char(string='Codigo de la Autoridad',size=10,required=True, help='Registra el Codigo del Cargo de la Autoridad')
    cargo_autoridad_nombre = fields.Char(string='Nombre de la Autoridad',size=40,required=True, help='Registra la Descripcion del Cargo de la Autoridad')

    
    _sql_constraints = [('cargo_autoridad_codigo', 'unique(cargo_autoridad_codigo)', 'El Código debe se único!')]    
    _sql_constraints = [('cargo_autoridad_nombre', 'unique(cargo_autoridad_nombre)', 'El Nombre debe se único!')] 




###################################################Fin del Estatus del Bien SUDEBIP####################################################################



########################################## Registro de Adquisicion del Bien ####################################################################3

class proveedores(models.Model):
    """Registra los Proveedores de los Bienes listo"""
    _name = 'proveedores'
    #_rec_name = 'proveedores_codigo'
    _rec_name = 'proveedores_nombre'
    #_rec_name = 'rif'
    #_rec_name = 'proveedores_tipo'
    #_rec_name = 'proveedores_observacion'
    

    proveedores_codigo = fields.Char(string='Codigo del Proveedor',size=6,required=True, help='Registra el Codigo del Proveedor del Bien')
    proveedores_nombre = fields.Char(string='Nombre del Proveedor',size=100,required=True, help='Registra el Nombre del Proveedor del Bien')
    rif                = fields.Char(string='Rif del Proveedor',size=20,required=True, help='Registra el RIF del Proveedor del Bien')
    proveedores_tipo   = fields.Selection([('N','Nacional'),('I','Internacional')],string='Tipo de Proveedor', size=1, help='Registra el tipo de proveedor N para nacional I internacional')
    proveedores_observacion = fields.Char(string='Otra Informacion del Proveedor',size=200, help='Registra Otra Informacion del Proveedor del Bien')



    _sql_constraints = [('proveedores_codigo', 'unique(proveedores_codigo)', 'El Código debe se único!')]  
    _sql_constraints = [('proveedores_nombre', 'unique(proveedores_nombre)', 'El Nombre debe se único!')]    
        




class forma_adquisicion(models.Model):
    """Registra las Formas de Adsquisicion del Bien listo"""
    _name = 'forma_adquisicion'
    #_rec_name = 'forma_adquisicion_codigo'
    _rec_name = 'forma_adquisicion_nombre'
    forma_adquisicion_codigo = fields.Char(string='Codigo de la Forma de Adquisicion',size=3,required=True, help='Registra el Codigo de la Forma de Adquisicion')
    forma_adquisicion_nombre = fields.Char(string='Nombre de la Forma de Adquisicion',size=100,required=True, help='Registra la descripcion de la forma de adquisicion')
    forma_adquisicion_codigo_origen = fields.Char(string='Codigo del Origen de la Forma de Adquisicion',size=3,required=True, help='Registra el Codigo del Origen de la Forma de Adquisicion')

    _sql_constraints = [('forma_adquisicion_codigo', 'unique(forma_adquisicion_codigo)', 'El Código debe se único!')]  
    _sql_constraints = [('forma_adquisicion_nombre', 'unique(forma_adquisicion_nombre)', 'El Nombre debe se único!')]  




class detalle_adquisi(models.Model):
   """Registra el Detalle de la Adquisicion del bien listo"""
   _name = 'detalle_adquisi'
   _rec_name = 'detalle_adquisi_codigo'
   #_rec_name = 'forma_adquisi_id'
   #_rec_name = 'nombre_concurso'
   #_rec_name = 'fecha_concurso'
   #_rec_name = 'proveedores_id'
   #_rec_name = 'numero_contrato'
   #_rec_name = 'numero_nota_entrega'
   #_rec_name = 'fecha_nota_entrega'
   #_rec_name = 'numero_factura'
   #_rec_name = 'fecha_factura'
   #_rec_name = 'codigo_pre'
   #_rec_name = 'monto_fact'


#comunes    
    
   fecha_adquisi            = fields.Date(string='Fecha de Adquisición',size=8,  required=True, help='Registra la Fecha de Adquisición  del bien')
   codigo_ori               = fields.Text(string='Código del Origen de Adquisición', size=3)
   codigo_ad                = fields.Text(string='Código de la Forma de Adquisición', size=3)
   detalle_adquisi_codigo   = fields.Char(string='Código del Detalle',size=12,
                              help='Registra el Codigo del Detalle de la Adquisicion del Bien')
   forma_adquisi_id         = fields.Many2one('forma_adquisicion',string='Forma de Adquisición', required=True, help='Registra el Codigo de Vinculacion con las Formas de Adquisicion')
   numero_factura           = fields.Char(string='Numero de Factura',size=15, required=False, help='Registra el Numero de Factura del bien')
   fecha_factura            = fields.Date(string='Fecha de la Factura',size=8,required=False, help='Registra la Fecha de la Factura del bien')
   nombre_registro          = fields.Char(string='Nombre del Registro ',size=100, help='Registra el Nombre del Registro')
   tomo                     = fields.Char(string='Tomo del Registro',size=20, help='Registra el Tomo del Registro')
   folio                    = fields.Integer(string='Folio del Registro',size=6, help='Registra el Folio del Registro ')
   fecha_registro           = fields.Date(string='Fecha de Registro',size=8, help='Registra la Fecha del Registro ')
 
   nombre_organo_emisor     = fields.Char(string='Nombre del Organo Emisor',size=200, help='Registra el Nombre del Organo Emisor')
   nombre_autoridad         = fields.Char(string='Nombre de la  Autoridad',size=50, help='Registra el Nombre de la Autoridad')
   num_sentencia            = fields.Char(string='Número de la Sentencia',size=30, help='Registra el Número de la Sentencia ó Acto Administrativo')
   fecha_sentencia          = fields.Date(string='Fecha de la Sentencia',size=8, help='Registra la Fecha de la Sentencia ó Acto Administrativo')
   nombre_benefici          = fields.Char(string='Nombre del Beneficiario',size=100, help='Registra el Nombre del Beneficiario ')
   nombre_cedente           = fields.Char(string='Nombre del Cedente',size=100, help='Registra el Nombre del Cedente ')
   numero_contrato          = fields.Char(string='Numero de Contrato',size=10, help='Registra el Numero de Contrato  de adquisicion del bien')
   fecha_contrato           = fields.Date(string='Fecha del Contrato',size=8, help='Registra la Fecha del Contrato')
   nombre_donante           = fields.Char(string='Nombre del Donante',size=100, help='Registra el Nombre del Donante')
   estado_autoridad_id      = fields.Many2one('mppp_reg_pro_estados','Entidad Federal',help='Registra La Entidad Federal')
   municipio_autoridad_id   = fields.Many2one('mppp_reg_pro_municipios','Municipio', domain="[('estado_id','=', estado_autoridad_id)]", help='Registra el Municipio')
   tribunal                 = fields.Char(string='Nombre del Tribunal ',size=255, help='Registra el Nombre del Tribunal ')
  
   modalidad_permuta        = fields.Selection([('1','Oferta Pública'),('2','Adjudicación Directa')],string='Modalida de la Permuta', size=1, help='Registra la Modalidad de la Pemuta')
   nombre_licitacion        = fields.Char(string='Nombre de la Licitación ',size=255, help='Registra el Nombre de la Licitación ')
   fecha_licitacion         = fields.Date(string='Fecha  de la Licitación ',size=8, help='Registra la Fecha de la Licitación')   
   numero_licitacion        = fields.Char(string='Número de la Licitación',size=30, help='Registra el Numero de la Licitación ')
   num_decreto              = fields.Char(string='Número del Decreto u Ordenanza',size=10, help='Registra el Número del Decreto u Ordenanza')
   fecha_decreto            = fields.Date(string='Fecha del Decreto u Ordenanza',size=8, help='Registra la Fecha del Decreto u Ordenanza')
   num_bienes               = fields.Char(string='Número de Bienes Transferidos',size=10, help='Registra el Número de Bienes Transferidos')
   nombre_accionista        = fields.Char(string='Nombre del Accionista',size=100, help='Registra el Nombre del Accionista')
   numero_resolucion        = fields.Char(string='Número de la Resolución',size=50, help='Registra el Número de la Resolución')
   fecha_resolucion         = fields.Date(string='Fecha de la Resolución de la Fusión',size=8, help='Registra la Fecha de la Resolución ')
   numero_gaceta            = fields.Integer(string='Número de la Gaceta de Resolución',size=8, help='Registra el Número de la Gaceta de Resolución')
   fecha_gaceta             = fields.Date(string='Fecha de la Gaceta de la Resolución ',size=8, help='Registra la Fecha de la Gaceta de la Resolución')
   numero_registro          = fields.Char(string='Número de Registro',size=20, help='Registra el Número de Registro ')
   tomo_documento            = fields.Char(string='Tomo del Documento Constitutivo',size=20, help='Registra el Tomo del Documento Constitutivo')
   folio_documento           = fields.Char(string='Folio del Documento Constitutivo',size=20, help='Registra el Folio del Documento Constitutivo')
   num_acta                 = fields.Char(string='Número del Acta',size=30, help='Registra el Número del Acta ')
   fecha_acta               = fields.Date(string='Fecha de Acta',size=8, help='Registra la Fecha del Acta ')
   numero_contrato_cesion   = fields.Char(string='Numero de Contrato Cesión',size=10, help='Registra el Numero de Contrato de la Cesión')
   fecha_contrato_cesion    = fields.Date(string='Fecha del Contrato Cesión',size=8, help='Registra la Fecha del Contrato de la Cesión')
   fecha_registro_cesion    = fields.Date(string='Fecha del Registro Cesión',size=8, help='Registra la Fecha del Registro de la Cesión')
   codigo_auto              = fields.Text(string='Código de la Autoridad', size=3)
   cargo_autoridad          = fields.Many2one('cargo_autoridad',string='Cargo de la Autoridad', help='Registra el Cargo de la Autoridad')

   fecha_de_ingreso_bien    = fields.Date(string='Fecha de Ingreso del Bien al Ministerio',size=8, help='Registra la Fecha de la Orden de Compra')

   nombre_prop_ant          = fields.Char(string='Nombre del Propietario Anterior',size=100, help='Registra el Nombre del Propietario Anterior')



#compra
   proveedores_id           = fields.Many2one('proveedores',string='Nombre del Proveedor',  help='Registra el Codigo de Vinculacion con el Proveedor del Bien')
   monto_fact               = fields.Float(string='Monto de la Factura', help='Registra el Monto de la Factura', digits=(20, 7))
   numero_ordcompra         = fields.Char(string='Numero de la Orden de Compra',size=30, help='Registra el Numero de la Orden de Compra del bien')
   fecha_ordcompra          = fields.Date(string='Fecha de la Orden de Compra',size=8, help='Registra la Fecha de la Orden de Compra')


#permuta

   nombre_copermutante      = fields.Char(string='Nombre del Copermutante',size=100, help='Registra el Nombre del Copermutante')
   



#dacion

   numero_finiquito         = fields.Char(string='Número del Finiquito',size=100, help='Registra el Número del Finiquito')
   fecha_finiquito          = fields.Date(string='Fecha del Finiquito',size=8, help='Registra la Fecha del Finiquito')




#donacion




#transferencia

  
#expro


 

#confiscacion
   nombre_prop_ant_confi    = fields.Char(string='Nombre del Propietario Anterior',size=100, help='Registra el Nombre del Propietario Anterior')
 
  
#aporte

#comiso



#embargo

   


#nacionalizacion
  
  

#fusion





  






   # numero_concurso          = fields.Char(string='Numero del Concurso',size=10, help='Registra el Numero del Concurso  de adquisicion del bien')
   # fecha_concurso           = fields.Date(string='Fecha del Concurso',size=8, help='Registra  la Fecha Concurso de adquisicion del bien')
   # nombre_concurso          = fields.Char(string='Nombre del Concurso',size=200, help='Registra el Nombre del Concurso de adquisicion del bien')
   # fecha_nota_entrega       = fields.Date(string='Fecha de la notaEntrega',size=8, help='Registra la Fecha de Entrega del bien')
   # numero_nota_entrega      = fields.Char(string='Numero Nota de Entrega', size=30, help='Registra el Numero de Nota de Entrega del bien')
 
   # num_sentencia            = fields.Char(string='Número de la Sentencia',size=30, help='Registra el Número de la Sentencia ó Acto Administrativo')

   # nombre_licitacion        = fields.Char(string='Nombre de la Licitación',size=100, help='Registra el Nombre de la Licitación')
   # fecha_licitacion         = fields.Date(string='Fecha de la Licitación',size=8, help='Registra la Fecha de la Licitación')
   # numero_licitacion        = fields.Char(string='Número de la Licitación',size=100, help='Registra el Número de la Licitación')
   # codigo_pre               = fields.Char(string='Código Presupuestario',size=13, help='Registra el Codigo presupuestario con el cual se compro el bien')
   # folio                    = fields.Integer(string='Folio del Registro',size=6, help='Registra el Folio del Registro')
   # fecha_sentencia          = fields.Date(string='Fecha de la Sentencia',size=8, help='Registra la Fecha de la Sentencia ó Acto Administrativo')
   # nombre_prop_ant          = fields.Char(string='Nombre del Propietario Anterior',size=100, help='Registra el Nombre del Propietario Anterior')
 
  
   # nombre_transfiere        = fields.Char(string='Nombre de quien Transfiere',size=100, help='Registra el Nombre de quien Trasfiere')
   # nombre_autoridad         = fields.Char(string='Nombre de la  Autoridad',size=100, help='Registra el Nombre de la Autoridad')

   # fecha_registro           = fields.Date(string='Fecha de Registro',size=8, help='Registra la Fecha del Registro')
   # tomo                     = fields.Char(string='Tomo del Registro',size=20, help='Registra el Tomo del Registro')
   # nombre_registro          = fields.Char(string='Nombre del Registro',size=200, help='Registra el Nombre del Registro')
   # nombre_benefici          = fields.Char(string='Nombre del Beneficiario',size=100, help='Registra el Nombre del Beneficiario')
  

 



  






   _sql_constraints = [('detalle_adquisi_codigo', 'unique(detalle_adquisi_codigo)', 'El Código debe se único!')]    

   @api.onchange('forma_adquisi_id')
   def generar_codigo(self): 
         self.codigo_ad  =  self.forma_adquisi_id.forma_adquisicion_codigo
         self.codigo_ori  =  self.forma_adquisi_id.forma_adquisicion_codigo_origen
  
   @api.onchange('detalle_adquisi_codigo')
   def generar_codigo_deta(self): 
        codigo =   self.codigo_ori 
        detalle =   self.detalle_adquisi_codigo
        self.detalle_adquisi_codigo= codigo+detalle 
  








            #self.detalle_adquisi_codigo= self.env['ir.sequence'].next_by_code('detalle_adquisi.detalle_adquisi_codigo')
 




         # codigo = ''
         # if self.forma_adquisi_id.forma_adquisicion_codigo_origen:
         #    codigo =  self.forma_adquisi_id.forma_adquisicion_codigo_origen

         # if self.detalle_adquisi_codigo:
         #     codigo += self.detalle_adquisi_codigo
        
         #     self.detalle_adquisi_codigo = codigo


   @api.onchange('cargo_autoridad')
   def generar_codigo_auto(self): 
       self.codigo_auto  =  self.cargo_autoridad.cargo_autoridad_codigo
        
         
  
   # @api.model
   # def generar_codigo_detalle(self,vals):
   #       vals['detalle_adquisi_codigo'] = self.env['ir.sequence'].next_by_code('detalle_adquisi.detelle_adquisi_codigo') or ('Nuevo')
   #       return super(detalle_adquisi, self).generar_codigo_detalle(vals)
    









#     _defaults = { 
#             'fecha_concurso': '1900/01/01', 
#             'fecha_contrato': '1900/01/01', 
#             'fecha_nota_entrega': '1900/01/01', 
#             'fecha_factura': '1900/01/01', 
#             'fecha_autoriza': '1900/01/01', 
#             'fecha_registro': '1900/01/01', 
#             'fecha_ordcompra': '1900/01/01', 
#             'fecha_sentencia': '1900/01/01', 
#             'fecha_licitacion': '1900/01/01', 
#             'fecha_finiquito':  '1900/01/01', }
    

########################################################## Fin del Registro de Adquisicion del Bien ##############################################################################

class unidad_medida_terreno(models.Model):
    """Registra la Unidad de medida del Terreno"""
    _name = 'unidad_medida_terreno'
    _rec_name = 'unidad_medida_terreno_nombre'
    

    unidad_medida_terreno_codigo  = fields.Char(string='Codigo de la Unidad de Medida',size=6,required=True, help='Registra el Codigo del Proveedor del Bien')
    unidad_medida_terreno_nombre  = fields.Char(string='Nombre de la Unidad de Medida',size=100,required=True, help='Registra el Nombre de la Unidad de Medida')
    
    _sql_constraints = [('unidad_medida_terreno_codigo', 'unique(unidad_medida_terreno_codigo)', 'El Código debe se único!')]  
    _sql_constraints = [(' unidad_medida_terreno_nombre', 'unique(unidad_medida_terreno_nombre)', 'El Nombre debe se único!')]    




class unidad_medida_construccion(models.Model):
    """Registra la Unidad de medida de la  Construccion"""
    _name = 'unidad_medida_construccion'
    _rec_name = 'unidad_medida_construccion_nombre'
    

    unidad_medida_construccion_codigo  = fields.Char(string='Codigo de la Unidad de Medida',size=6,required=True, help='Registra el Codigo del Proveedor del Bien')
    unidad_medida_construccion_nombre  = fields.Char(string='Nombre de la Unidad de Medida',size=100,required=True, help='Registra el Nombre de la Unidad de Medida')
    
    _sql_constraints = [('unidad_medida_construccion_codigo', 'unique(unidad_medida_construccion_codigo)', 'El Código debe se único!')]  
    _sql_constraints = [(' unidad_medida_construccion_nombre', 'unique(unidad_medida_construccion_nombre)', 'El Nombre debe se único!')]    


class unidad_medida_peso(models.Model):
    """Registra la Unidad de medida de Peso"""
    _name = 'unidad_medida_peso'
    _rec_name = 'unidad_medida_peso_nombre'
    
    unidad_medida_peso_codigo  = fields.Char(string='Codigo de la Unidad de Medida',size=6,required=True, help='Registra el Codigo del Proveedor del Bien')
    unidad_medida_peso_nombre  = fields.Char(string='Nombre de la Unidad de Medida',size=100,required=True, help='Registra el Nombre de la Unidad de Medida')
    
    _sql_constraints = [('unidad_medida_peso_codigo', 'unique(unidad_medida_peso_codigo)', 'El Código debe se único!')]  
    _sql_constraints = [(' unidad_medida_peso_nombre', 'unique(unidad_medida_peso_nombre)', 'El Nombre debe se único!')]    


############################################### Registro de Oficinas y Personal #################################################################################################



class uniadm_sudebi(models.Model):
     """Registra Categorias de Unidades Administrativas segun Sudebip listo """
     _name = 'uniadm_sudebi'
     #_rec_name = 'uniadm_sudebi_codigo'
     _rec_name = 'uniadm_sudebi_nombre'
    
     uniadm_sudebi_codigo = fields.Char(string='Codigo de Categorias de Unidades Administrativas',size=3,required=True, help='Registra el Codigo de la Categoria de Oficina (SUDEBIP)')
     uniadm_sudebi_nombre = fields.Char(string='Nombre de Categorias de Unidades Administrativas',size=100,required=True, help='Registra el Nombre de la Categoria de Oficina (SUDEBIP)')
    
     _sql_constraints = [('uniadm_sudebi_codigo', 'unique(uniadm_sudebi_codigo)', 'El Código debe se único!')]
     _sql_constraints = [('uniadm_sudebi_nombre', 'unique(uniadm_sudebi_nombre)', 'El Nombre debe se único!')]


class oficinas(models.Model):
     """Registra las Oficinas del Ministerio listo"""
     _name = 'oficinas'
     #_rec_name = 'oficinas_codigo'
     _rec_name = 'oficinas_nombre'
     _order = 'orden desc'
     # _rec_name = 'oficinas_padre_id'
     #_rec_name = 'uniadm_sudebi_codigo'
    
    
     oficinas_codigo       = fields.Char(string='Nomenclatura de la Oficina',size=20,required=True, help='Registra la Nomenclatura de la Oficina')
     oficinas_nombre       = fields.Char(string='Nombre de la Oficina',size=200,required=True, help='Registra el Nombre de la Oficina')
     uniadm_sudebi_codigo  = fields.Many2one('uniadm_sudebi',string='Categorias Administrativas (SUDEBIP)', required=True, help='Registra el Codigo de Vinculacion con las Categorias de Unidades Administrativas segun Sudebi ')
     oficinas_padre_id     = fields.Many2one('oficinas',string='Unidad de Adscripción')
     regiones_id           = fields.Many2one('regiones',string= 'Regiones de Ubicación de la Sede',size=3, required=True,help='Regiones de Ubicación de la Sede')    
     sedes_id              = fields.Many2one('sedes',string='Sedes' , required=True, domain="[('regiones_id','=',regiones_id)]")
     resp_uso_uni_id       = fields.Many2one('personas',string= 'Responsable del Bien por la Unidad', domain="[('oficinas_id','=',id)]",size=3,help='Responsable de los  Bienes por la Unidad')    
     
     orden = fields.Integer(string='Orden de Jerarquias de las Oficinas')
   

     _sql_constraints = [('oficinas_codigo', 'unique(oficinas_codigo)', 'El Código debe se único!')] 
     _sql_constraints = [('oficinas_nombre', 'unique(oficinas_nombre)', 'El Nombre debe se único!')] 


class sedes(models.Model):
     """Registra las sedes del Ministerio listo"""
     _name = 'sedes'
     #_rec_name = 'oficinas_codigo'
     _rec_name = 'sedes_nombre'
     # _rec_name = 'oficinas_padre_id'
     #_rec_name = 'uniadm_sudebi_codigo'
    
    
     sedes_codigo       = fields.Char(string='Código de la Sede',size=7,required=True, help='Registra el Código de la Sede')
     sedes_nombre       = fields.Char(string='Nombre de la Sede',size=100,required=True, help='Registra el Nombre de la Sede')     
     pais_id            = fields.Many2one('paises', string='País de Ubicación de la Sede',size=3, required=True, domain= "[('selepa','=','TRUE')]",help='Regiones de Ubicación de la Sede')    
     tipo_localizacion  = fields.Selection([('N','Nacional'),('I','Internacional')], string='Tipo de Localización',size=2,required=True,help='Tipo de Localización de la Sede')
     lugar_id           = fields.Many2one('tipos_lugares_ubicacion_sudebip', string='Tipo o Lugar de Ubicación',size=3, required=True,help='Tipo o Lugar de Ubicación de la Sede según SUDEBIP')    
     regiones_id        = fields.Many2one('regiones', string='Regiones de Ubicación de la Sede',size=3, required=True,help='Regiones de Ubicación de la Sede')    
     estado_id          = fields.Many2one('mppp_reg_pro_estados','Entidad Federal',required=True,  domain="[('seledo','=','TRUE')]",help='Registra La Entidad Federal donde se Encuentra el Bien')
     municipios_id = fields.Many2one('mppp_reg_pro_municipios','Municipio',required=True, domain="[('estado_id','=',estado_id)]", help='Registra el Municipio donde se la Sede')
     parroquias_id = fields.Many2one('mppp_reg_pro_parroquias','Parroquia',required=True,  domain="[('municipios_id','=', municipios_id)",help='Registra la Parroquia donde se Encuentra la Sede')
     ciudad_id     = fields.Many2one('mppp_reg_pro_ciudad','Ciudad',required=True,  domain="[('municipios_id','=',municipios_id)]",help='Registra la Ciudad  donde se Encuentra la Sede')
     urbanizacion  = fields.Char(string='Urbanización Calle o Avenida donde se localiza la sede del Órgano o Ente',size=100,
                     required=True, help='Registra la  Urbanización donde se localiza la sede del Órgano o Ente')
     calle         = fields.Char(string=' Calle o Avenida donde se localiza la sede del Órgano o Ente',size=100,
                     required=True, help='Registra la  Calle o Avenida donde se localiza la sede del Órgano o Ente')
     casa_edificio  = fields.Char(string=' Casa o Edificio donde se localiza la sede del Órgano o Ente',size=100,
                     required=True, help='Registra la   Casa o Edificio donde se localiza la sede del Órgano o Ente')
     piso_sede     = fields.Char(string=' Piso (si aplica) donde se localiza la sede del Órgano o Ente',size=100,
                     help='Registra la  Calle o Avenida donde se localiza la sede del Órgano o Ente')

     resp_uso_sede_id   = fields.Many2one('personas',string= 'Responsable del Bien por la Sede', domain="[('oficinas_id','=',id)]",size=3, help='Responsable de los  Bienes por la Sede')    

   #  resp_pat_id = fields.Many2one('personas', 'Responsable Patrimonial', size=3,domain="[('tipo_resp','=','D')]", help='Registra el Responsable Patrimonial de la Sede')

     _sql_constraints = [('sedes_codigo ', 'unique(sedes_codigo)', 'El Código debe se único!')] 
     _sql_constraints = [('sedes_nombre', 'unique(sedes_nombre)', 'El Nombre debe se único!')] 


class regiones(models.Model):
     """Registra las Regiones  del Ministerio listo"""
     _name = 'regiones'
     #_rec_name = 'oficinas_codigo'
     _rec_name = 'regiones_nombre'
   
        
     #regiones_codigo       = fields.Char(string='Codigo de la Región',size=3,required=True, help='Registra el Codigo de la Región')
     regiones_nombre       = fields.Char(string='Nombre de la Región',size=100,required=True, help='Registra el Nombre de la Región')
     #resp_uso_region_id   = fields.Many2one('personas',string= 'Responsable del Bien por la Region', domain="[('oficinas_id','=',id)]",size=3, help='Responsable de la Región')    

     #_sql_constraints = [('regiones_codigo ', 'unique(regiones_codigo)', 'El Código debe se único!')] 
     _sql_constraints = [('regiones_nombre', 'unique(regiones_nombre)', 'El Nombre debe se único!')] 






class tipos_lugares_ubicacion_sudebip(models.Model):
     """Registra las Oficinas del Ministerio listo"""
     _name = 'tipos_lugares_ubicacion_sudebip'
     #_rec_name = 'oficinas_codigo'
     _rec_name = 'nombre_lugar'
   
    
    
     codigo_lugar       = fields.Char(string='Codigo del Tipo o Lugar de Ubicación',size=3,required=True, help='Registra el Codigo del Tipo o Lugar de Ubicación')
     nombre_lugar       = fields.Char(string='Nombre del Tipo o Lugar de Ubicación',size=100,required=True, help='Registra el Nombre del Tipo o Lugar de Ubicación')
     

     #_sql_constraints = [('regiones_codigo ', 'unique(regiones_codigo)', 'El Código debe se único!')] 
     _sql_constraints = [('nombre_lugar', 'unique(nombre_lugar)', 'El Nombre debe se único!')] 












class personas(models.Model):
     """Registra las Personas que trabajan en el Ente listo"""
     _name = 'personas'
     #_rec_name = 'personas_cedula'
     _rec_name = 'combination'

     #_rec_name = 'personas_snombre'
     #_rec_name = 'personas_papellido'    
     #     #_rec_name = 'personas_sapellido'

     personas_cedula      = fields.Integer(string='Cedula',size=10,required=True, help='Registra la Cedula de la persona')
     personas_pnombre     = fields.Char(string='Primer Nombre',size=40,required=True, help='Registra el Primer Nombre de la Persona')
     personas_snombre     = fields.Char(string='Segundo Nombre',size=40, help='Registra el Segundo Nombre de la Persona')
     personas_papellido   = fields.Char(string='Primer Apellido',size=40,required=True, help='Registra el Primer Apellido de la Persona')
     personas_sapellido   = fields.Char(string='Segundo Apellido',size=40, help='Registra el Segundo Apellido de la Persona')
     personas_cargo       = fields.Char(string='Cargo',size=100, required=True,help='Registra el Cargo de la Persona')
     personas_regiones_id = fields.Many2one('regiones',string= 'Regiones de Ubicación de la Sede',size=3, required=True,help='Regiones de Ubicación de la Sede')    
     personas_sedes_id    = fields.Many2one('sedes',string='Sedes del Ministerio', required=True, domain="[('regiones_id','=',personas_regiones_id)]",help='Registra el Codigo de Vinculacion con las Sedes del Ministerio')
     oficinas_id          = fields.Many2one('oficinas', 'Oficina', size=3, required=True, domain="[('sedes_id','=',personas_sedes_id)]",help='Registra el Codigo de Vinculacion con las Oficinas del Ministerio')
     tipo_resp            = fields.Selection([('D','Administrativo'),('U','Uso Directo'),('C','Cuido Directo')],string='Tipo de Responsable',size=2,required=True,help='Tipo de Responsable')
     correo_e             = fields.Char(string='Correo Electronico',size=200, required=True, help='Registra el Correo Electrónico de la Persona')
     #status             = fields.Selection([('A','Activo'),('I','Inactivo')],string='Estatus del Personal',size=2,required=True,help='Estatus del Personal')
     active               = fields.Boolean('Estatus del Personal (Activo s/n)', default = True, size=2, help='Indica sei el personal esta activo en la institución ')
        


     combination = fields.Char(string='Combination', compute='_compute_fields_combination')

     @api.depends('personas_pnombre', 'personas_papellido')
     def _compute_fields_combination(self):
        for test in self:
            test.combination = test.personas_pnombre + ' ' + test.personas_papellido

     

    

     # def name_get(self, context=None): # Redefine el método
     #    res = [] #declara la lista en blanco
     #    personas = self.browse(uid, ids, context)
     #    for persona in personas:
     #        res.append((persona.id, persona.personas_pnombre + ' ' + persona.personas_papellido))
     #    return res    
    

    
     _sql_constraints = [('personas_cedula', 'unique(personas_cedula)', 'La Cedula debe se única!')]  
    
  

class res_users_inherit(models.Model):
     _name = 'res.users'
     _inherit ='res.users'
  
    
     personas_sedes_id = fields.Many2one('sedes',string='Sedes del Ministerio', domain="[('regiones_id','=',personas_regiones_id)]",help='Registra el Codigo de Vinculacion con las Sedes del Ministerio')
     oficinas_id = fields.Many2one('oficinas', 'Oficina', size=3, domain="[('sedes_id','=',personas_sedes_id)]", help='Registra el Codigo de Vinculacion con las Oficinas del Ministerio')
     persona_id = fields.Many2one('personas',string='Personal del Ministerio', domain="[('oficinas_id','=', oficinas_id)]") 
     personas_regiones_id = fields.Many2one('regiones',string= 'Regiones de Ubicación de la Sede',size=3, help='Regiones de Ubicación de la Sede')


     @api.onchange('persona_id')
           
     def onchange_persona(self):
         nombre =''
         nombre = self.persona_id.personas_pnombre 
         apellido = self.persona_id.personas_papellido
         correo = self.persona_id.correo_e 
      
         self.name = nombre + ' ' + apellido
         self.login = correo 











class bienes_ministerio(models.Model):
     """datos ministero"""
     _name = 'bienes_ministerio'
     #_rec_name = 'rif'
     _rec_name = 'nsudebip'
     #_rec_name = 'fecha_remision'
    
     rif              = fields.Char(string='Rif del Ministerio',size=10,required=True, help='Registra el Rif del Ministeiro')
     nsudebip         = fields.Char(string='Numero del Ministerio en la Sudebip',size=18,required=True, help='Registra el Numero Asignado al Ministerio por la Sudebip')
     resp_patrimonial = fields.Many2one('personas','Responsable Patrimonial del Ministerio')
     fecha_remision   = fields.Date(string='Fecha de Remision del Inventario', help='Registra la Fecha de Remision del Inventario a la Sudebip')
     telefono         = fields.Char(string='Numero Telefonico de la Unidad de Bienes',size=18,required=True, help='Registra el Numero telefono de la Unidad de Bienes')
     seleinv          = fields.Boolean (string='Vigencia', help='Registra si la informacion es la vigente para remitir el inventario')
    
#     _defaults = { 
#         'fecha_remision': '1900-01-01', }




############################################### Registro de Oficinas y Personal #################################################################################################
        

############################################### Registro de Polizas de Seguro #################################################################################################



class cobertura(models.Model):
     """Registra la Cobertura de la Poliza de Seguro listo"""
     _name = 'cobertura'
     #_rec_name = 'cobertura_codigo'
     _rec_name = 'cobertura_nombre'
    
     cobertura_codigo   = fields.Char(string='Codigo de la Cobertura',size=3,required=True, help='Registra el Codigo del tipo de Cobertura')
     cobertura_nombre   = fields.Char(string='Nombre de la Cobertura',size=100,required=True, help='Registra la descripcion de la Cobertura de la Poliza')
    
     _sql_constraints = [('cobertura_codigo', 'unique(cobertura_codigo)', 'El Código debe se único!')]  
     _sql_constraints = [('cobertura_nombre', 'unique(cobertura_nombre)', 'El Nombre  debe se único!')]  


class aseguradoras(models.Model):
     """Registra las Compañías Aseguradoras listo"""
     _name = 'aseguradoras'
     _rec_name = 'aseguradoras_nombre'
     #_rec_name = 'aseguradoras_codigo'
    
     aseguradoras_nombre = fields.Char(string='Nombre de la Aseguradora segun Sudebip',size=100,required=True, help='Registra el nombre de la Compañia aseguradora')
     aseguradoras_codigo = fields.Char(string='Codigo de la Aseguradora segun Sudebip',size=5, required=True,help='Registra el Codigo de la Aseguradora')
    

     _sql_constraints = [('aseguradoras_codigo', 'unique(aseguradoras_codigo)', 'El Código debe se único!')]  
     _sql_constraints = [('aseguradoras_nombre', 'unique(aseguradoras_nombre)', 'El Nombre debe se único!')]  


class poliza(models.Model):
     """Registra el detalle de la Poliza de Seguro listo"""
     _name = 'poliza'
     _rec_name = 'poliza_codigo'
     #_rec_name = 'poliza_numero'
     #_rec_name = 'aseguradoras_id'
     #_rec_name = 'poliza_tipo'
     #_rec_name = 'poliza_monto'
     #_rec_name = 'poliza_fecha_ini'
     #_rec_name = 'ploza_fecha_fin'
     #_rec_name = 'poliza_respon_civil'
     #_rec_name = 'cobertura_id'
    
     poliza_codigo        = fields.Char(string='Codigo de la Poliza',size=3,required=True, help='Registra el Codigo de la Poliza')
     poliza_numero        = fields.Char(string='Numero de la Poliza',size=40,required=True, help='Registra el Número de la Poliza')
     aseguradoras_id      = fields.Many2one('aseguradoras',string='Codigo de la Aseguradora',size=3,required =True, help='Registra el Codigo de Vinculacion con La Aseguradora del Bien')
     poliza_tipo          = fields.Selection([('1','Individual'),('2','Colectiva')],string='Tipo de Poliza',size=1,required=True, help='Registra el Tipo de Poliza N nacional I internacional')
     poliza_monto         = fields.Float(string='Monto Asegurado',required=True, help='Registra el Monto de la Poliza')
     poliza_fecha_ini     = fields.Date(string='Fecha de Inicio de la Poliza',size=8,required=True, help='Registra la Fecha de Inicio de la Poliza')
     poliza_fecha_fin      = fields.Date(string='Fecha Fin de la Poliza',size=8,required=True, help='Registra la Fecha de Finzalizacion de la Poliza')
     poliza_respon_civil  = fields.Selection([('S','Si'),('N','No')],string='Pose Responsabilidad Civil',size=1, help='Registra si la poliza tiene  Seguro de Responsabiliad Civil Si ,No')
     cobertura_id         = fields.Many2one('cobertura',string='Tipo de Cobertura', help='Registra el Codigo de Vinculacion con el Tipo de Cobertura')
     otro_tipo_cobertura   = fields.Char(string='Otro Tipo de Cobertura de la Poliza',size=40, help='Registra el Otro tipo de Cobertura de la Poliza')
     descrip_otra_cobertura   = fields.Char(string='Descripción del Otro Tipo de Cobertura de la Poliza',size=100, help='Registra la Descripción del Otro tipo de Cobertura de la Poliza')
     codigo_cobertura   = fields.Char(string='Codigo tipo de Cobertura de la Poliza',compute="compute_generar_codigo",size=40,required=True, help='Registra el Codigo  del tipo de Cobertura de la Poliza')

     _sql_constraints = [('poliza_codigo', 'unique(poliza_codigo)', 'El Código debe se único!')]  

     @api.one
     @api.depends('cobertura_id')
     def compute_generar_codigo(self): 
      self.codigo_cobertura  =  self.cobertura_id.cobertura_codigo

     @api.onchange('poliza_fecha_fin')
     def onchange_poliza_fecha_fin(self):
        if (str(self.poliza_fecha_ini) > str(self.poliza_fecha_fin)):
            raise ValidationError('La Fecha de Inicio no puede ser mayor que la de finalización!')

#    _defaults = { 
#         'poliza_fecha_ini': '1900-01-01', 
#         'ploza_fecha_fin': '1900-01-01', }
    









############################################### Registro de Division GEopolitica #################################################################################



class paises(models.Model):
     """Division Geopolitica listo"""
     _name = 'paises'
     #_rec_name = 'codigo'
     _rec_name = 'pais'

     codigo_pais = fields.Char(string='Codigo del País',size=3,required=True, help='Registra el Código de Identificación País')
     pais = fields.Char(string='País',size=150,required=True, help='Registra el nombre del País')
     selepa = fields.Boolean (string='Seleccionado', help='Registra si el País aplica para el organismo')
    
     _sql_constraints = [('paises', 'unique(codigo_pais)', 'El Código debe se único!')]


     _defaults={ 
        'selepa': True,
     }



class mppp_reg_pro_estados(models.Model):
     """Division Geopolitica listo"""
     _name = 'mppp_reg_pro_estados'
     #_rec_name = 'codigo'
     _rec_name = 'estado'

     codigo = fields.Char(string='Codigo del Estado',size=2,required=True, help='Registra el Código de Identificación del Estado del País')
     estado = fields.Char(string='Estado',size=30,required=True, help='Registra el nombre del estado')
     seledo = fields.Boolean (string='Seleccionado', help='Registra si el estado aplica para el organismo')
    
     _sql_constraints = [('mppp_reg_pro_estados', 'unique(codigo)', 'El Código debe se único!')]


     _defaults={ 
        'seledo': True,
     }



class mppp_reg_pro_municipios(models.Model):
     """Division Geopolitica listo"""
     _name = 'mppp_reg_pro_municipios'
     #_rec_name = 'codigo'
     _rec_name = 'municipio'
     #_rec_name = 'estado_id'
    
    
     codigo         = fields.Char(string='Codigo del Municipio',size=10,required=True, help='Registra el Código de Identificación del Municipio del Estado del País')
     municipio      = fields.Char(string='Municipio',size=30,required=True, help='Registra el nombre del Municipio')
     estado_id      = fields.Many2one('mppp_reg_pro_estados',string='Estado', help='Registra el Codigo de Vinculación con el Estado al cual pertenece el Municipio')
     codigo_sudebip = fields.Char(string='Codigo del Municipio por la SUDEBIP',size=10,required=True, help='Registra el Código de Identificación del Municipio del Estado del País, Segun SUDEBIP')
     selemu    = fields.Boolean (string='Seleccionado', default ="True", help='Registra si el municipio aplica para el organismo')
     _sql_constraints = [('mppp_reg_pro_municipios', 'unique(estado_id,codigo)', 'El Código del Municipio debe se único!')] 
     _sql_constraints = [('reg_pro_municipios_sudebip', 'unique(estado_id,codigo,codigo_sudebip)', 'El Código de SUDEBIP debe se único!')] 
    
     _defaults = { 
        'selemu': True
     }
    




class mppp_reg_pro_parroquias(models.Model):
     """Division Geopolitica listo"""
     _name = 'mppp_reg_pro_parroquias'
     #_rec_name = 'codigo'
     _rec_name = 'parroquia'
     #_rec_name = 'municipios_id'
    
    
     codigo        = fields.Char(string='Codigo de la Parroquia',size=10,required=True, help='Registra el Código de Identificación de la Parroquia del Municipio del Estado')
     parroquia     = fields.Char(string='Parroquia',size=30,required=True, help='Registra el nombre de la Parroquia')
     municipios_id = fields.Many2one('mppp_reg_pro_municipios',string='Municipios', help='Registra el Codigo de Vinculación con el Municipio al cual pertenece la Parroquia')
     codigo_sudebip = fields.Char(string='Codigo de la Parroquia por la SUDEBIP',size=10,required=True, help='Registra el Identificación de la Parroquia del Municipio del País segun SUDEBIP')
     selepa        = fields.Boolean (string='Seleccionado', default ="True", help='Registra si la parroquia aplica para el organismo')
     _sql_constraints = [('mppp_reg_pro_parroquias', 'unique(municipios_id,codigo)', 'El Código de la Parroquia debe se único!')] 
     _sql_constraints = [('reg_pro_parroquias_sudebip', 'unique(municipios_id,codigo,codigo_sudebip)', 'El Código de SUDEBIP debe se único!')]       
    
     _defaults = { 
          'selepa': True
     }




class mppp_reg_pro_ciudad(models.Model):
     """Division Geopolitica listo"""
     _name = 'mppp_reg_pro_ciudad'
     #_rec_name = 'codigo'
     _rec_name = 'ciudad'
     #_rec_name = 'municipios_id'
    
    
     codigo        = fields.Char(string='Codigo de la Ciudad',size=10,required=True, help='Registra el Código de Identificación de la Ciudad del Municipio del Estado')
     ciudad        = fields.Char(string='Ciudad',size=30,required=True, help='Registra el nombre de la Ciudad')
     municipios_id = fields.Many2one('mppp_reg_pro_municipios',string='Municipios', help='Registra el Codigo de Vinculación con el Municipio al cual pertenece la Ciudad')
     codigo_sudebip = fields.Char(string='Codigo de la Ciudad por la SUDEBIP',size=10,required=True, help='Registra el Identificación de la Ciudad del Municipio del País segun SUDEBIP')
     seleci        = fields.Boolean (string='Seleccionado', help='Registra si la ciduda aplica para el organismo')

     _sql_constraints = [('mppp_reg_pro_ciudad', 'unique(municipios_id,codigo)', 'El Código de la Ciudad debe se único!')] 
     _sql_constraints = [('reg_pro_ciudad_sudebip', 'unique(municipios_id,codigo,codigo_sudebip)', 'El Código de SUDEBIP debe se único!')]       
     
     _defaults = { 
        'seleci': True
     }

class clase_funcional_terr(models.Model):
    """Clasificacion funcional del terreno"""
    _name = 'clase_funcional_terr'
    _rec_name = 'clase_funcional_terr_nombre'

    clase_funcional_terr_codigo = fields.Char(string='Codigo del Tipo de Anexo',size=3,help='Registra el Codigo de la Clasificación Funcional del Terreno')
    clase_funcional_terr_nombre = fields.Char(string='Descripción de la Clasificacion',size=200,required=True, help='Registra el Nombre del Tipo de Anexos del Inmueble')
    